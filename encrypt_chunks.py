# encrypt_chunks.py ‚Äî —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∫–∏ processed_chunks.json

import json
import os
from pathlib import Path
from typing import List, Dict, Any
from encryptor_tools import obfuscate_text, save_map, load_map

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—É—Ç–µ–π
IN_FILE = "data/output/processed_chunks.json"
OUT_FILE = "data/output/processed_chunks_obfuscated.json"
MAP_FILE = "data/output/obfuscation_map.json"
BACKUP_DIR = "data/backup"

def backup_file(file_path: str) -> bool:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Ñ–∞–π–ª–∞"""
    try:
        if not os.path.exists(file_path):
            return False
            
        backup_path = os.path.join(BACKUP_DIR, os.path.basename(file_path))
        os.makedirs(BACKUP_DIR, exist_ok=True)
        
        with open(file_path, 'r', encoding='utf-8') as src:
            with open(backup_path, 'w', encoding='utf-8') as dst:
                dst.write(src.read())
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        return False

def validate_chunks(chunks: List[Dict[str, Any]]) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —á–∞–Ω–∫–æ–≤"""
    if not isinstance(chunks, list):
        print("‚ùå –û—à–∏–±–∫–∞: –ß–∞–Ω–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º")
        return False
        
    required_fields = {"text", "metadata"}
    for i, chunk in enumerate(chunks):
        if not isinstance(chunk, dict):
            print(f"‚ùå –û—à–∏–±–∫–∞: –ß–∞–Ω–∫ {i} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º")
            return False
            
        if not all(field in chunk for field in required_fields):
            print(f"‚ùå –û—à–∏–±–∫–∞: –ß–∞–Ω–∫ {i} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è")
            return False
            
    return True

def process_chunks(chunks: List[Dict[str, Any]], mask_map: Dict[str, Any]) -> List[Dict[str, Any]]:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–æ–≤ —Å –æ–±—Ñ—É—Å–∫–∞—Ü–∏–µ–π"""
    new_chunks = []
    for chunk in chunks:
        new_chunk = dict(chunk)
        
        # –û–±—Ñ—É—Å–∫–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
        if "text" in chunk:
            new_chunk["text"] = obfuscate_text(chunk["text"], mask_map)
            
        # –û–±—Ñ—É—Å–∫–∞—Ü–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        if "metadata" in chunk:
            metadata = chunk["metadata"]
            if isinstance(metadata, dict):
                for key, value in metadata.items():
                    if isinstance(value, str):
                        metadata[key] = obfuscate_text(value, mask_map)
                        
        new_chunks.append(new_chunk)
    return new_chunks

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞–Ω–∫–æ–≤"""
    print("\nüîê –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏ —á–∞–Ω–∫–æ–≤...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    if not os.path.exists(IN_FILE):
        print(f"‚ùå –û—à–∏–±–∫–∞: –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª {IN_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
        
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    print("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
    if backup_file(IN_FILE):
        print("‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞")
    else:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é")
        
    # –ó–∞–≥—Ä—É–∑–∫–∞ —á–∞–Ω–∫–æ–≤
    print(f"\nüìñ –ó–∞–≥—Ä—É–∑–∫–∞ —á–∞–Ω–∫–æ–≤ –∏–∑ {IN_FILE}...")
    try:
        with open(IN_FILE, "r", encoding="utf-8") as f:
            chunks = json.load(f)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞–Ω–∫–æ–≤: {e}")
        return
        
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —á–∞–Ω–∫–æ–≤
    if not validate_chunks(chunks):
        print("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —á–∞–Ω–∫–æ–≤")
        return
        
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(chunks)} —á–∞–Ω–∫–æ–≤")
    
    # –û–±—Ñ—É—Å–∫–∞—Ü–∏—è
    print("\nüîÑ –û–±—Ñ—É—Å–∫–∞—Ü–∏—è —á–∞–Ω–∫–æ–≤...")
    mask_map = {}
    new_chunks = process_chunks(chunks, mask_map)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
    try:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞–Ω–∫–æ–≤
        os.makedirs(os.path.dirname(OUT_FILE), exist_ok=True)
        with open(OUT_FILE, "w", encoding="utf-8") as f:
            json.dump(new_chunks, f, ensure_ascii=False, indent=2)
            
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏
        if not save_map(mask_map, MAP_FILE):
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏")
            return
            
        print(f"‚úÖ –û–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–∞–Ω–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {OUT_FILE}")
        print(f"‚úÖ –ö–∞—Ä—Ç–∞ –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {MAP_FILE}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        return
        
    print(f"\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞–Ω–∫–æ–≤: {len(chunks)}")
    print(f"   - –°–æ–∑–¥–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {len(mask_map)}")

if __name__ == "__main__":
    main()
