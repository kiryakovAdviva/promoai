# --- START OF FILE reranker.py ---

import numpy as np
from typing import List, Tuple, Dict, Any, Optional
from sentence_transformers import CrossEncoder
import sys
import os
from pathlib import Path
from .cache import init_reranker_cache

class Reranker:
    def __init__(self, model_name: str = "cross-encoder/ms-marco-MiniLM-L-6-v2", max_length: int = 512):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è reranker'–∞ —Å cross-encoder –º–æ–¥–µ–ª—å—é.
        
        Args:
            model_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–µ—Ä–µ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è
            max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è reranking'–∞
        """
        try:
            print(f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ reranker: {model_name}...")
            self.model = CrossEncoder(model_name)
            self.cache = init_reranker_cache()
            self.max_length = max_length
            print("‚úÖ –ú–æ–¥–µ–ª—å reranker —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏ reranker: {e}")
            self.model = None
            self.cache = None

    def _truncate_text(self, text: str) -> str:
        """
        –û–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã.
        
        Args:
            text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            
        Returns:
            str: –û–±—Ä–µ–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        if not text:
            return ""
            
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ª–æ–≤–∞
        words = text.split()
        
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –∫–æ—Ä–æ—á–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if len(words) <= self.max_length:
            return text
            
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ max_length —Å–ª–æ–≤
        truncated = " ".join(words[:self.max_length])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –±—ã–ª –æ–±—Ä–µ–∑–∞–Ω
        if len(words) > self.max_length:
            truncated += "..."
            
        return truncated

    def rerank(self, 
               query: str, 
               documents: List[Dict[str, Any]], 
               top_k: int = 5) -> List[Tuple[Dict[str, Any], float]]:
        """
        –ü–µ—Ä–µ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—Ä–æ—Å–∞.
        
        Args:
            query: –¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            documents: –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è
            top_k: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π [(document, score), ...]
        """
        if not self.model or not documents:
            return [(doc, 0.0) for doc in documents[:top_k]]
            
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if self.cache:
                cached_result = self.cache.get(query, documents)
                if cached_result is not None:
                    print("üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç reranking'–∞")
                    return cached_result
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä –∑–∞–ø—Ä–æ—Å-–¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏
            # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
            pairs = [(query, self._truncate_text(doc.get('text', ''))) for doc in documents]
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
            scores = self.model.predict(pairs)
            
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –æ—Ü–µ–Ω–∫–∞–º
            scored_docs = list(zip(documents, scores))
            scored_docs.sort(key=lambda x: x[1], reverse=True)
            
            result = scored_docs[:top_k]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            if self.cache:
                self.cache.set(query, documents, result)
                
            return result
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            return [(doc, 0.0) for doc in documents[:top_k]]

    def rerank_with_weights(self,
                          query: str,
                          documents: List[Dict[str, Any]],
                          top_k: int = 5,
                          semantic_weight: float = 0.7,
                          rerank_weight: float = 0.3) -> List[Tuple[Dict[str, Any], float]]:
        """
        –ü–µ—Ä–µ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –≤–µ—Å–æ–≤ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏ reranking'–∞.
        
        Args:
            query: –¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            documents: –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –∏—Ö —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–∫–æ—Ä–∞–º–∏
            top_k: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            semantic_weight: –í–µ—Å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
            rerank_weight: –í–µ—Å reranking'–∞
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π [(document, final_score), ...]
        """
        if not self.model or not documents:
            return documents[:top_k]
            
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if self.cache:
                cached_result = self.cache.get(query, documents)
                if cached_result is not None:
                    print("üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∑–≤–µ—à–µ–Ω–Ω–æ–≥–æ reranking'–∞")
                    return cached_result
            
            # –ü–æ–ª—É—á–∞–µ–º reranking –æ—Ü–µ–Ω–∫–∏
            reranked_docs = self.rerank(query, [doc for doc, _ in documents])
            
            # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –æ—Ü–µ–Ω–∫–∏
            final_scores = []
            for (doc, semantic_score), (_, rerank_score) in zip(documents, reranked_docs):
                final_score = (semantic_score * semantic_weight + 
                             rerank_score * rerank_weight)
                final_scores.append((doc, final_score))
                
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–º –æ—Ü–µ–Ω–∫–∞–º
            final_scores.sort(key=lambda x: x[1], reverse=True)
            
            result = final_scores[:top_k]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            if self.cache:
                self.cache.set(query, documents, result)
                
            return result
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–º –ø–µ—Ä–µ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            return documents[:top_k]

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä reranker'–∞
reranker = None

def init_reranker(model_name: str = "cross-encoder/ms-marco-MiniLM-L-6-v2", max_length: int = 512) -> Reranker:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ reranker'–∞.
    """
    global reranker
    if reranker is None:
        reranker = Reranker(model_name, max_length)
    return reranker

# --- END OF FILE reranker.py --- 