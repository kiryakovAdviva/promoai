# --- START OF FILE run_app.py (v18 - Enforced SAFE_MODE) ---
import gradio as gr
import os
from dotenv import load_dotenv
import sys
from typing import Dict

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
load_dotenv()

# --- –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π ---
try:
    from assets.ui_components import create_ui
    from assets.event_handlers import authenticate
    from assistant.llm_client import together_configured, gemini_configured
    from assistant.search_engine import initialize_search_engine
    from encryptor_tools import deobfuscate_text, load_map
    print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
except ImportError as e:
    print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –≤ run_app.py: {e}")
    print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫ –≤–µ—Ä–Ω–∞ –∏ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    sys.exit(1)

# --- –í—ã–±–æ—Ä LLM ---
llm_choice = ""
available_llms = []
if together_configured: available_llms.append("1. Together AI")
if gemini_configured: available_llms.append("2. Google Gemini")
if not available_llms: 
    print("‚ùå –ù–∏ –æ–¥–Ω–∞ LLM –Ω–µ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–∞!")
    sys.exit(1)
elif len(available_llms) == 1:
    choice_str = available_llms[0]
    llm_choice = "together" if "Together" in choice_str else "gemini"
    print(f"‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ LLM: {choice_str}. –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë.")
else:
    print("–í—ã–±–µ—Ä–∏—Ç–µ LLM:")
    print("\n".join(available_llms))
    while llm_choice not in ["together", "gemini"]:
        choice_input = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1 –∏–ª–∏ 2): ").strip()
        if choice_input == "1" and together_configured: llm_choice = "together"
        elif choice_input == "2" and gemini_configured: llm_choice = "gemini"
        else: print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥.")
print(f"‚ñ∂Ô∏è –í—ã–±—Ä–∞–Ω–∞ LLM: {llm_choice.upper()}")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SAFE_MODE ---
print("\nüîê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SAFE_MODE...")
map_file_path = "data/output/obfuscation_map.json"
if not os.path.exists(map_file_path):
    print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ö–∞—Ä—Ç–∞ –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏ {map_file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ encrypt_chunks.py –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏.")
    sys.exit(1)

try:
    obfuscation_map = load_map(map_file_path)
    print(f"‚úÖ –ö–∞—Ä—Ç–∞ –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏: {e}")
    sys.exit(1)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
print("\n‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞...")
initialize_search_engine()

# --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
if __name__ == "__main__":
    print(f"\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Gradio (LLM: {llm_choice.upper()})...")
    initial_app_state = {
        "llm_choice": llm_choice,
        "safe_mode": True,  # SAFE_MODE –≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω
        "obfuscation_map": obfuscation_map
    }
    ui = create_ui(initial_app_state)
    ui.launch(
        auth=authenticate,
        auth_message="–í—Ö–æ–¥ –≤ PromoAI",
        inbrowser=True,
        share=False  # –û—Ç–∫–ª—é—á–∞–µ–º share –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    )
    print("‚ÑπÔ∏è –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")

# --- END OF FILE run_app.py ---