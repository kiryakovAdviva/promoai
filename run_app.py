# --- START OF FILE run_app.py (v17 - Fixed load_map import) ---
import gradio as gr
import os
from dotenv import load_dotenv
import sys
from typing import Dict # –î–æ–±–∞–≤–∏–ª –∏–º–ø–æ—Ä—Ç Dict

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
load_dotenv()

# --- –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π ---
try:
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£–±—Ä–∞–ª load_map –∏–∑ —ç—Ç–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ ---
    from assets.ui_components import create_ui
    from assets.event_handlers import authenticate
    # --- –ö–æ–Ω–µ—Ü –∏–∑–º–µ–Ω–µ–Ω–∏—è ---
    from assistant.llm_client import together_configured, gemini_configured
    from assistant.search_engine import initialize_search_engine
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ encryptor_tools –¥–ª—è SAFE_MODE
    from encryptor_tools import deobfuscate_text # –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç
    safe_mode_possible = True
except ImportError as e:
    print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –≤ run_app.py: {e}")
    print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫ –≤–µ—Ä–Ω–∞ –∏ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–ª—É—à–∫–∏, —á—Ç–æ–±—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–≥–ª–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ
    def create_ui(state): return gr.Markdown("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.")
    def authenticate(u, p): return False
    def initialize_search_engine(): pass
    # def load_map(p): return {} # load_map –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–µ–Ω, –æ–Ω –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –Ω–∏–∂–µ
    together_configured = False; gemini_configured = False; safe_mode_possible = False

# --- –í—ã–±–æ—Ä LLM ---
llm_choice = ""
available_llms = []
if together_configured: available_llms.append("1. Together AI")
if gemini_configured: available_llms.append("2. Google Gemini")
if not available_llms: print("‚ùå –ù–∏ –æ–¥–Ω–∞ LLM –Ω–µ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–∞!"); llm_choice = "none"
elif len(available_llms) == 1:
    choice_str = available_llms[0]; llm_choice = "together" if "Together" in choice_str else "gemini"
    print(f"‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ LLM: {choice_str}. –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë.")
else:
    print("–í—ã–±–µ—Ä–∏—Ç–µ LLM:"); print("\n".join(available_llms))
    while llm_choice not in ["together", "gemini"]:
        choice_input = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1 –∏–ª–∏ 2): ").strip()
        if choice_input == "1" and together_configured: llm_choice = "together"
        elif choice_input == "2" and gemini_configured: llm_choice = "gemini"
        else: print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥.")
print(f"‚ñ∂Ô∏è –í—ã–±—Ä–∞–Ω–∞ LLM: {llm_choice.upper() if llm_choice != 'none' else '–ù–ï–¢'}")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SAFE_MODE ---
SAFE_MODE = False
obfuscation_map: Dict = {}
if safe_mode_possible:
    answer = input("üîê –í–∫–ª—é—á–∏—Ç—å SAFE_MODE (–æ–±—Ñ—É—Å–∫–∞—Ü–∏—è)? [Y/n]: ").strip().lower()
    SAFE_MODE = not (answer == "n")
    if SAFE_MODE:
        print("‚úÖ SAFE_MODE –í–ö–õ–Æ–ß–ï–ù")
        map_file_path = "data/output/obfuscation_map.json"
        print(f"‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: SAFE_MODE —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã –∏–∑ {map_file_path}...")
        if os.path.exists(map_file_path):
             try:
                 # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º load_map –∑–¥–µ—Å—å ---
                 from encryptor_tools import load_map
                 # --- –ö–æ–Ω–µ—Ü –∏–∑–º–µ–Ω–µ–Ω–∏—è ---
                 obfuscation_map = load_map(map_file_path); print(f"‚úÖ –ö–∞—Ä—Ç–∞ –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
             except ImportError:
                  print(f"‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å 'load_map' –∏–∑ encryptor_tools. SAFE_MODE –æ—Ç–∫–ª—é—á–µ–Ω."); SAFE_MODE = False
             except Exception as e:
                  print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏: {e}"); SAFE_MODE = False
        else: print(f"‚ö†Ô∏è –ö–∞—Ä—Ç–∞ –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏ {map_file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. SAFE_MODE –æ—Ç–∫–ª—é—á–µ–Ω."); SAFE_MODE = False
    else:
        print("‚úÖ SAFE_MODE –í–´–ö–õ–Æ–ß–ï–ù")
else:
    print("‚ÑπÔ∏è –ú–æ–¥—É–ª—å encryptor_tools –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω. SAFE_MODE –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")


# --- –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (–æ—Å—Ç–∞–µ—Ç—Å—è –∑–¥–µ—Å—å) ---
# user_credentials –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤–Ω—É—Ç—Ä–∏ event_handlers.py, –Ω–æ authenticate –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
# user_credentials = {"Admin": "Admin", "User": "User"} # –ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å, –µ—Å–ª–∏ –æ–Ω –Ω–µ –Ω—É–∂–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
print("‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞...")
initialize_search_engine()

# --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
if __name__ == "__main__":
    launch_ready = True
    if llm_choice == "none": print("\n‚ÄºÔ∏è –ó–ê–í–ï–†–®–ï–ù–ò–ï: LLM –Ω–µ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–∞."); launch_ready = False

    if launch_ready:
        print(f"\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Gradio (LLM: {llm_choice.upper()})...")
        initial_app_state = {
            "llm_choice": llm_choice,
            "safe_mode": SAFE_MODE,
            "obfuscation_map": obfuscation_map
        }
        ui = create_ui(initial_app_state)
        ui.launch(
            auth=authenticate,
            auth_message="–í—Ö–æ–¥ –≤ PromoAI",
            inbrowser=True,
            share=True # –û—Å—Ç–æ—Ä–æ–∂–Ω–æ
        )
        print("‚ÑπÔ∏è –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")

# --- END OF FILE run_app.py ---