# --- START OF FILE run_embedder.py (Refactored v5 - Added progress bars) ---

import os
import json
import numpy as np
import faiss
import sys
import traceback
from typing import List, Dict, Any, Optional
from tqdm import tqdm
import time

# --- –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ ---
try:
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã, –µ—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–∫–µ—Ç–∞
    # from assistant.embedder import model, embed_texts, get_embedding_dim, MODEL_NAME # –î–æ–±–∞–≤–∏–ª MODEL_NAME
    # from document_processor.common_utils import load_chunks_json
    # –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∫ —Å–∫—Ä–∏–ø—Ç, –ø—Ä–æ–±—É–µ–º –ø—Ä—è–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã
    from assistant.embedder import (
        model, embed_texts_batched, get_embedding_dim, MODEL_NAME,
        validate_embeddings, log_embedding_stats
    )
    from document_processor.common_utils import load_chunks_json
    print("‚úÖ –ò–º–ø–æ—Ä—Ç—ã embedder –∏ common_utils –≤—ã–ø–æ–ª–Ω–µ–Ω—ã.")
except ImportError as e:
    sys.stderr.write(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π: {e}\n")
    sys.stderr.write("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ embedder.py –∏ –ø–∞–ø–∫–∞ document_processor –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ PYTHONPATH –∏–ª–∏ –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –∫–∞–∫ —á–∞—Å—Ç—å –ø–∞–∫–µ—Ç–∞.\n")
    sys.exit(1)
except Exception as e_imp: # –õ–æ–≤–∏–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, NameError, –µ—Å–ª–∏ MODEL_NAME –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ embedder.py)
    sys.stderr.write(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {e_imp}\n")
    sys.exit(1)


# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ü—É—Ç–µ–π ---
OUTPUT_DIR = os.path.join("data", "output")
PROCESSED_CHUNKS_FILENAME = "processed_chunks_obfuscated.json"
CHUNKS_PATH = os.path.join(OUTPUT_DIR, PROCESSED_CHUNKS_FILENAME)
CACHE_DIR = "data/cache"
EMBEDDINGS_FILENAME = "embeddings.npy"
INDEXED_CHUNKS_FILENAME = "indexed_chunks.json"
FAISS_INDEX_FILENAME = "faiss_index.bin"
EMBEDDINGS_PATH = os.path.join(CACHE_DIR, EMBEDDINGS_FILENAME)
INDEXED_CHUNKS_PATH = os.path.join(CACHE_DIR, INDEXED_CHUNKS_FILENAME)
FAISS_INDEX_PATH = os.path.join(CACHE_DIR, FAISS_INDEX_FILENAME)

def create_optimized_index(dimension: int, num_vectors: int) -> faiss.Index:
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ FAISS"""
    if num_vectors > 1000000:
        # –î–ª—è –±–æ–ª—å—à–∏—Ö –Ω–∞–±–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º IVF
        nlist = min(int(np.sqrt(num_vectors)), 1000)
        quantizer = faiss.IndexFlatIP(dimension)
        index = faiss.IndexIVFFlat(quantizer, dimension, nlist)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω IVF –∏–Ω–¥–µ–∫—Å —Å {nlist} –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏")
    else:
        # –î–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –Ω–∞–±–æ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º HNSW
        index = faiss.IndexHNSWFlat(dimension, 32)  # 32 - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Å–µ–¥–µ–π
        print("‚úÖ –°–æ–∑–¥–∞–Ω HNSW –∏–Ω–¥–µ–∫—Å")
    return index

def cache_embeddings(embeddings: np.ndarray, cache_path: str):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    try:
        os.makedirs(os.path.dirname(cache_path), exist_ok=True)
        np.save(cache_path, embeddings)
        print(f"‚úÖ –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à: {cache_path}")
    except Exception as e:
        sys.stderr.write(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –≤ –∫—ç—à: {e}\n")

def run_embedding_pipeline():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∏ FAISS-–∏–Ω–¥–µ–∫—Å–∞.
    """
    print("\n" + "=" * 60)
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∏ FAISS –∏–Ω–¥–µ–∫—Å–∞...")
    print(f"üìÇ –ò—Å—Ö–æ–¥–Ω—ã–µ —á–∞–Ω–∫–∏: {CHUNKS_PATH}")
    print(f"üíæ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {CACHE_DIR}")
    print("=" * 60 + "\n")

    if model is None:
        sys.stderr.write("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ú–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –Ω–µ –±—ã–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ embedder.py. –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ.\n")
        sys.exit(1)

    try:
        os.makedirs(CACHE_DIR, exist_ok=True)
        print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫—ç—à–∞ '{CACHE_DIR}' –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞/—Å–æ–∑–¥–∞–Ω–∞.")
    except OSError as e:
        sys.stderr.write(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫—ç—à–∞ '{CACHE_DIR}': {e}\n")
        sys.exit(1)

    # –ó–∞–≥—Ä—É–∑–∫–∞ —á–∞–Ω–∫–æ–≤ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
    print(f"üìñ –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–∞–Ω–∫–æ–≤ –∏–∑ {CHUNKS_PATH}...")
    chunks = load_chunks_json(CHUNKS_PATH)
    if not chunks:
        print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –§–∞–π–ª '{CHUNKS_PATH}' –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞.")
        return

    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —á–∞–Ω–∫–æ–≤: {len(chunks)}")

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
    print("\nüîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...")
    texts_to_embed = []
    valid_indices = []
    
    with tqdm(total=len(chunks), desc="–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤", unit="—á–∞–Ω–∫") as pbar:
        for i, chunk in enumerate(chunks):
            text = chunk.get("text", "")
            if text and text.strip():
                texts_to_embed.append(text)
                valid_indices.append(i)
            pbar.update(1)

    if len(valid_indices) != len(chunks):
        print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(chunks) - len(valid_indices)} –ø—É—Å—Ç—ã—Ö —á–∞–Ω–∫–æ–≤. –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã –ø—Ä–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–µ.")
        valid_chunks = [chunks[i] for i in valid_indices]
        if not valid_chunks:
            print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ –æ—Å—Ç–∞–ª–æ—Å—å –≤–∞–ª–∏–¥–Ω—ã—Ö –Ω–µ–ø—É—Å—Ç—ã—Ö —á–∞–Ω–∫–æ–≤ –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞.")
            return
        chunks = valid_chunks  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞–Ω–∫–æ–≤ —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º–∏
        print(f"üìä –û—Å—Ç–∞–ª–æ—Å—å –≤–∞–ª–∏–¥–Ω—ã—Ö —á–∞–Ω–∫–æ–≤ –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {len(chunks)}")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
    print(f"\nüß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è {len(texts_to_embed)} —á–∞–Ω–∫–æ–≤ (–ú–æ–¥–µ–ª—å: {MODEL_NAME})...")
    start_time = time.time()
    embeddings = embed_texts_batched(texts_to_embed, batch_size=32)
    end_time = time.time()
    
    if embeddings is None or embeddings.size == 0:
        sys.stderr.write("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∏.\n")
        return

    print(f"\n‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"üî¢ –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {embeddings.shape[1]}")
    print(f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {embeddings.shape[0]}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞–Ω–∫–æ–≤ –∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
    if len(chunks) != embeddings.shape[0]:
        print(f"‚ùå –û—à–∏–±–∫–∞: –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞–Ω–∫–æ–≤ ({len(chunks)}) –∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ ({embeddings.shape[0]})")
        return

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
    print("\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
    try:
        with tqdm(total=2, desc="–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ", unit="—Ñ–∞–π–ª") as pbar:
            print(f"  –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –≤ {EMBEDDINGS_PATH}...")
            cache_embeddings(embeddings, EMBEDDINGS_PATH)
            pbar.update(1)

            print(f"  –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–∞–Ω–∫–æ–≤ –≤ {INDEXED_CHUNKS_PATH}...")
            with open(INDEXED_CHUNKS_PATH, "w", encoding="utf-8") as f:
                json.dump(chunks, f, indent=2, ensure_ascii=False, default=str)
            pbar.update(1)
        print("‚úÖ –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ –∏ —á–∞–Ω–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    except Exception as e:
        sys.stderr.write(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∏–ª–∏ —á–∞–Ω–∫–æ–≤: {e}\n")
        traceback.print_exc()
        return

    embedding_dim = embeddings.shape[1]
    model_dim = get_embedding_dim()
    if model_dim is not None and embedding_dim != model_dim:
        print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ ({embedding_dim}) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º–æ–π —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å—é –º–æ–¥–µ–ª–∏ ({model_dim}).")

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±—É—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
    print(f"\nüõ†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ FAISS –∏–Ω–¥–µ–∫—Å–∞ —Å —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å—é {embedding_dim}...")
    try:
        # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å
        index = create_optimized_index(embedding_dim, len(embeddings))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ–∫—Ç–æ—Ä—ã –≤ –∏–Ω–¥–µ–∫—Å —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
        print("  –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–æ–≤ –≤ –∏–Ω–¥–µ–∫—Å...")
        with tqdm(total=1, desc="–ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è", unit="–æ–ø–µ—Ä–∞—Ü–∏—è") as pbar:
            if embeddings.flags['C_CONTIGUOUS']:
                index.add(embeddings.astype(np.float32))
            else:
                print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ú–∞—Å—Å–∏–≤ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –Ω–µ C-contiguous. –°–æ–∑–¥–∞–µ—Ç—Å—è –∫–æ–ø–∏—è.")
                embeddings_contiguous = np.ascontiguousarray(embeddings.astype(np.float32))
                index.add(embeddings_contiguous)
            pbar.update(1)

        print(f"üìä FAISS –∏–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ–∫—Ç–æ—Ä–æ–≤ –≤ –∏–Ω–¥–µ–∫—Å–µ: {index.ntotal}")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
        print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ FAISS –∏–Ω–¥–µ–∫—Å–∞ –≤ {FAISS_INDEX_PATH}...")
        with tqdm(total=1, desc="–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞", unit="–æ–ø–µ—Ä–∞—Ü–∏—è") as pbar:
            faiss.write_index(index, FAISS_INDEX_PATH)
            pbar.update(1)
        print("‚úÖ FAISS –∏–Ω–¥–µ–∫—Å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")

    except Exception as e:
        sys.stderr.write(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ FAISS –∏–Ω–¥–µ–∫—Å–∞: {e}\n")
        traceback.print_exc()
        return

    print("\n" + "=" * 60)
    print("üéâ –ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∏ –∏–Ω–¥–µ–∫—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    print(f"   - –≠–º–±–µ–¥–¥–∏–Ω–≥–∏: {EMBEDDINGS_PATH}")
    print(f"   - –î–∞–Ω–Ω—ã–µ —á–∞–Ω–∫–æ–≤: {INDEXED_CHUNKS_PATH}")
    print(f"   - FAISS –ò–Ω–¥–µ–∫—Å: {FAISS_INDEX_PATH}")
    print("=" * 60 + "\n")

if __name__ == "__main__":
    run_embedding_pipeline()

# --- END OF FILE run_embedder.py ---