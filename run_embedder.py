# --- START OF FILE run_embedder.py (Refactored v3 - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –≤—ã–≤–æ–¥ –∏–º–µ–Ω–∏ –º–æ–¥–µ–ª–∏) ---

import os
import json
import numpy as np
import faiss
import sys
import traceback

# --- –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ ---
try:
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã, –µ—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–∫–µ—Ç–∞
    # from assistant.embedder import model, embed_texts, get_embedding_dim, MODEL_NAME # –î–æ–±–∞–≤–∏–ª MODEL_NAME
    # from document_processor.common_utils import load_chunks_json
    # –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∫ —Å–∫—Ä–∏–ø—Ç, –ø—Ä–æ–±—É–µ–º –ø—Ä—è–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã
    from assistant.embedder import model, embed_texts, get_embedding_dim, MODEL_NAME # –î–æ–±–∞–≤–∏–ª MODEL_NAME
    from document_processor.common_utils import load_chunks_json
    print("‚úÖ –ò–º–ø–æ—Ä—Ç—ã embedder –∏ common_utils –≤—ã–ø–æ–ª–Ω–µ–Ω—ã.")
except ImportError as e:
    sys.stderr.write(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π: {e}\n")
    sys.stderr.write("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ embedder.py –∏ –ø–∞–ø–∫–∞ document_processor –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ PYTHONPATH –∏–ª–∏ –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –∫–∞–∫ —á–∞—Å—Ç—å –ø–∞–∫–µ—Ç–∞.\n")
    sys.exit(1)
except Exception as e_imp: # –õ–æ–≤–∏–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, NameError, –µ—Å–ª–∏ MODEL_NAME –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ embedder.py)
    sys.stderr.write(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {e_imp}\n")
    sys.exit(1)


# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ü—É—Ç–µ–π ---
OUTPUT_DIR = os.path.join("data", "output")
PROCESSED_CHUNKS_FILENAME = "processed_chunks.json"
CHUNKS_PATH = os.path.join(OUTPUT_DIR, PROCESSED_CHUNKS_FILENAME)
CACHE_DIR = "data/cache"
EMBEDDINGS_FILENAME = "embeddings.npy"
INDEXED_CHUNKS_FILENAME = "indexed_chunks.json"
FAISS_INDEX_FILENAME = "faiss_index.bin"
EMBEDDINGS_PATH = os.path.join(CACHE_DIR, EMBEDDINGS_FILENAME)
INDEXED_CHUNKS_PATH = os.path.join(CACHE_DIR, INDEXED_CHUNKS_FILENAME)
FAISS_INDEX_PATH = os.path.join(CACHE_DIR, FAISS_INDEX_FILENAME)

def run_embedding_pipeline():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∏ FAISS-–∏–Ω–¥–µ–∫—Å–∞.
    """
    print("-" * 60)
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∏ FAISS –∏–Ω–¥–µ–∫—Å–∞...")
    print(f"üìÇ –ò—Å—Ö–æ–¥–Ω—ã–µ —á–∞–Ω–∫–∏: {CHUNKS_PATH}")
    print(f"üíæ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {CACHE_DIR}")
    print("-" * 60)

    if model is None:
        sys.stderr.write("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ú–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –Ω–µ –±—ã–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ embedder.py. –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ.\n")
        sys.exit(1)

    try:
        os.makedirs(CACHE_DIR, exist_ok=True)
        print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫—ç—à–∞ '{CACHE_DIR}' –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞/—Å–æ–∑–¥–∞–Ω–∞.")
    except OSError as e:
        sys.stderr.write(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫—ç—à–∞ '{CACHE_DIR}': {e}\n")
        sys.exit(1)

    print(f"üìñ –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–∞–Ω–∫–æ–≤ –∏–∑ {CHUNKS_PATH}...")
    chunks = load_chunks_json(CHUNKS_PATH)
    if not chunks:
        print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –§–∞–π–ª '{CHUNKS_PATH}' –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞.")
        return

    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —á–∞–Ω–∫–æ–≤: {len(chunks)}")

    texts_to_embed = [chunk.get("text", "") for chunk in chunks]
    valid_indices = [i for i, text in enumerate(texts_to_embed) if text and text.strip()]
    if len(valid_indices) != len(texts_to_embed):
        print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(texts_to_embed) - len(valid_indices)} –ø—É—Å—Ç—ã—Ö —á–∞–Ω–∫–æ–≤. –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã –ø—Ä–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–µ.")
        valid_chunks = [chunks[i] for i in valid_indices]
        valid_texts = [texts_to_embed[i] for i in valid_indices]
        if not valid_chunks:
            print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ –æ—Å—Ç–∞–ª–æ—Å—å –≤–∞–ª–∏–¥–Ω—ã—Ö –Ω–µ–ø—É—Å—Ç—ã—Ö —á–∞–Ω–∫–æ–≤ –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞.")
            return
        chunks = valid_chunks
        texts_to_embed = valid_texts
        print(f"üìä –û—Å—Ç–∞–ª–æ—Å—å –≤–∞–ª–∏–¥–Ω—ã—Ö —á–∞–Ω–∫–æ–≤ –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {len(chunks)}")

    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º MODEL_NAME –¥–ª—è –≤—ã–≤–æ–¥–∞ ---
    print(f"üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è {len(texts_to_embed)} —á–∞–Ω–∫–æ–≤ (–ú–æ–¥–µ–ª—å: {MODEL_NAME})...")
    # --- –ö–æ–Ω–µ—Ü –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è ---
    embeddings = embed_texts(texts_to_embed)

    if embeddings is None or embeddings.size == 0:
        sys.stderr.write("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∏.\n")
        return

    print(f"üî¢ –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {embeddings.shape[1]}")
    print(f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {embeddings.shape[0]}")

    try:
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –≤ {EMBEDDINGS_PATH}...")
        np.save(EMBEDDINGS_PATH, embeddings.astype(np.float32))

        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —á–∞–Ω–∫–æ–≤ –≤ {INDEXED_CHUNKS_PATH}...")
        with open(INDEXED_CHUNKS_PATH, "w", encoding="utf-8") as f:
            json.dump(chunks, f, indent=2, ensure_ascii=False, default=str)
        print("‚úÖ –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ –∏ —á–∞–Ω–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    except Exception as e:
        sys.stderr.write(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∏–ª–∏ —á–∞–Ω–∫–æ–≤: {e}\n")
        traceback.print_exc()
        return

    embedding_dim = embeddings.shape[1]
    model_dim = get_embedding_dim()
    if model_dim is not None and embedding_dim != model_dim:
         print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ ({embedding_dim}) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º–æ–π —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å—é –º–æ–¥–µ–ª–∏ ({model_dim}).")

    print(f"üõ†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ FAISS –∏–Ω–¥–µ–∫—Å–∞ (IndexFlatIP) —Å —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å—é {embedding_dim}...")
    try:
        index = faiss.IndexFlatIP(embedding_dim)
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤–µ–∫—Ç–æ—Ä–æ–≤
        if embeddings.flags['C_CONTIGUOUS']:
             index.add(embeddings.astype(np.float32))
        else:
             print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ú–∞—Å—Å–∏–≤ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –Ω–µ C-contiguous. –°–æ–∑–¥–∞–µ—Ç—Å—è –∫–æ–ø–∏—è.")
             embeddings_contiguous = np.ascontiguousarray(embeddings.astype(np.float32))
             index.add(embeddings_contiguous)

        print(f"üìä FAISS –∏–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ–∫—Ç–æ—Ä–æ–≤ –≤ –∏–Ω–¥–µ–∫—Å–µ: {index.ntotal}")

        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ FAISS –∏–Ω–¥–µ–∫—Å–∞ –≤ {FAISS_INDEX_PATH}...")
        faiss.write_index(index, FAISS_INDEX_PATH)
        print("‚úÖ FAISS –∏–Ω–¥–µ–∫—Å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")

    except Exception as e:
        sys.stderr.write(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ FAISS –∏–Ω–¥–µ–∫—Å–∞: {e}\n")
        traceback.print_exc()
        return

    print("-" * 60)
    print("üéâ –ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∏ –∏–Ω–¥–µ–∫—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    print(f"   - –≠–º–±–µ–¥–¥–∏–Ω–≥–∏: {EMBEDDINGS_PATH}")
    print(f"   - –î–∞–Ω–Ω—ã–µ —á–∞–Ω–∫–æ–≤: {INDEXED_CHUNKS_PATH}")
    print(f"   - FAISS –ò–Ω–¥–µ–∫—Å: {FAISS_INDEX_PATH}")
    print("-" * 60)

if __name__ == "__main__":
    run_embedding_pipeline()

# --- END OF FILE run_embedder.py ---