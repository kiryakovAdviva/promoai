# --- START OF FILE common_utils.py ---
import re
import json
import hashlib
import os
from datetime import datetime
import numpy as np
import sys
from typing import Any, Dict, List, Optional

def clean_text(text: Optional[str]) -> str:
    """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤, –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫."""
    if not isinstance(text, str):
        return ""
    text = text.replace('\xa0', ' ')  # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–π –ø—Ä–æ–±–µ–ª
    text = re.sub(r'[ \t]+', ' ', text)  # –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã/—Ç–∞–±—ã –Ω–∞ –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª
    text = re.sub(r'\n\s*\n', '\n\n', text) # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –º–µ–∂–¥—É –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏
    text = re.sub(r'\n{3,}', '\n\n', text) # –û—Å—Ç–∞–≤–ª—è–µ–º –Ω–µ –±–æ–ª–µ–µ –¥–≤—É—Ö –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥
    return text.strip()

def hash_chunk(text: str, document_name: str, chunk_index: int) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç MD5 —Ö–µ—à –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–∞–Ω–∫–∞."""
    return hashlib.md5(f"{document_name}-{chunk_index}-{text}".encode("utf-8")).hexdigest()

def serialize_meta(obj: Any) -> Any:
    """–°–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è JSON (datetime, numpy)."""
    if isinstance(obj, datetime): return obj.isoformat()
    # Numpy types
    if isinstance(obj, (np.int_, np.intc, np.intp, np.int8, np.int16, np.int32, np.int64, np.uint8, np.uint16, np.uint32, np.uint64)): return int(obj)
    elif isinstance(obj, (np.float_, np.float16, np.float32, np.float64)): return float(obj) if not np.isnan(obj) else None # Convert NaN to None
    elif isinstance(obj, (np.ndarray,)): return obj.tolist()
    elif isinstance(obj, (np.bool_)): return bool(obj)
    elif isinstance(obj, (np.void)): return None # Handle numpy void type
    # Fallback: try converting to string, useful for complex objects that might have a __str__ method
    try:
        return str(obj)
    except Exception:
        raise TypeError(f"Object of type {type(obj).__name__} is not JSON serializable and has no default string representation")

def save_chunks_json(chunks: List[Dict], output_path: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∞–Ω–∫–æ–≤ –≤ JSON —Ñ–∞–π–ª."""
    try:
        os.makedirs(os.path.dirname(output_path), exist_ok=True)
        with open(output_path, "w", encoding="utf-8") as f:
            json.dump(chunks, f, ensure_ascii=False, indent=2, default=serialize_meta)
        print(f"üíæ –ß–∞–Ω–∫–∏ ({len(chunks)} —à—Ç.) —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_path}")
    except Exception as e:
        sys.stderr.write(f"‚ùå ERROR: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–∞–Ω–∫–∏ –≤ {output_path}: {e}\n")
        # traceback.print_exc() # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏

def load_chunks_json(json_path: str) -> List[Dict]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —á–∞–Ω–∫–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞."""
    if not os.path.exists(json_path):
        sys.stderr.write(f"‚ùå ERROR: –§–∞–π–ª {json_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.\n")
        return []
    try:
        with open(json_path, "r", encoding="utf-8") as f:
            data = json.load(f)
        print(f"‚úÖ –ß–∞–Ω–∫–∏ ({len(data)} —à—Ç.) –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {json_path}")
        return data
    except Exception as e:
        sys.stderr.write(f"‚ùå ERROR: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å/–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å {json_path}: {e}\n")
        return []

def format_table_to_markdown(table_data: List[Dict[str, Any]], headers: List[str]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤ Markdown."""
    if not isinstance(table_data, list) or not isinstance(headers, list) or not headers:
        return "[–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã]"

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã –ø–∞–π–ø–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö –∏ –¥–∞–Ω–Ω—ã—Ö
    escaped_headers = [str(h).replace("|", "\\|") for h in headers]
    md_header = "| " + " | ".join(escaped_headers) + " |"
    md_separator = "|-" + "-|".join(['-' * max(3, len(str(h))) for h in escaped_headers]) + "-|" # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ 3

    md_rows = []
    for row_dict in table_data:
        if isinstance(row_dict, dict):
            row_values = [
                str(row_dict.get(h, '')).replace("|", "\\|").replace("\n", " ") # –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤–Ω—É—Ç—Ä–∏ —è—á–µ–µ–∫
                for h in headers
            ]
            md_rows.append("| " + " | ".join(row_values) + " |")

    return md_header + "\n" + md_separator + "\n" + "\n".join(md_rows)

# --- END OF FILE common_utils.py ---